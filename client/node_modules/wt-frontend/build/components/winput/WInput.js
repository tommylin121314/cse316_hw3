"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//import "./winput.scss";
function WInput(_ref) {
  var children = _ref.children,
      className = _ref.className,
      inputType = _ref.inputType,
      wType = _ref.wType,
      labelText = _ref.labelText,
      placeholderText = _ref.placeholderText,
      hoverAnimation = _ref.hoverAnimation,
      labelAnimation = _ref.labelAnimation,
      barAnimation = _ref.barAnimation,
      required = _ref.required,
      disabled = _ref.disabled,
      inputClass = _ref.inputClass,
      labelClass = _ref.labelClass,
      barClass = _ref.barClass,
      other = _objectWithoutProperties(_ref, ["children", "className", "inputType", "wType", "labelText", "placeholderText", "hoverAnimation", "labelAnimation", "barAnimation", "required", "disabled", "inputClass", "labelClass", "barClass"]);

  var classes = (0, _clsx.default)(className, // inputType, // inside input div
  wType, // labelText, // inside label div
  // placeholderText, // inside input div
  // fillColor, // TODO inside input div
  // { ["hover-" + hoverAnimation]: hoverAnimation }, // inside input div
  // { ["bar-" + barAnimation]: barAnimation }, // inside span div
  // { ["label-" + labelAnimation]: labelAnimation }, // inside label div
  {
    "disabled": disabled
  } // disabeled color
  // required, // inside input div
  // shadow // TODO inside input div
  // shape // TODO inside input div
  );
  var input = null;

  if (labelText && labelAnimation) {
    if (labelAnimation === "shrink" || labelAnimation === "up") {
      if (wType === "outlined") {
        // feildset has hover and bar animation
        input = /*#__PURE__*/_react.default.createElement("input", _extends({
          type: inputType,
          required: true,
          className: "input-label " + inputClass,
          placeholder: placeholderText,
          disabled: disabled
        }, other));
      } else {
        // filled & lined (lined does not need to have input label)
        if (disabled) {
          input = /*#__PURE__*/_react.default.createElement("input", _extends({
            type: inputType,
            required: true,
            className: "input-label " + inputClass,
            placeholder: placeholderText,
            disabled: disabled
          }, other));
        } else {
          input = /*#__PURE__*/_react.default.createElement("input", _extends({
            type: inputType,
            required: true,
            className: ["hover-" + hoverAnimation] + " input-label " + inputClass,
            placeholder: placeholderText
          }, other));
        }
      }
    } else {
      // fixed label animations - do not need required
      if (disabled) {
        input = /*#__PURE__*/_react.default.createElement("input", _extends({
          type: inputType,
          required: required,
          className: "input-label " + inputClass,
          placeholder: placeholderText,
          disabled: disabled
        }, other));
      } else {
        input = /*#__PURE__*/_react.default.createElement("input", _extends({
          type: inputType,
          required: required,
          className: ["hover-" + hoverAnimation] + " input-label " + inputClass,
          placeholder: placeholderText
        }, other));
      }
    }
  } else {
    // no label
    if (disabled) {
      input = /*#__PURE__*/_react.default.createElement("input", _extends({
        type: inputType,
        required: required,
        className: inputClass,
        placeholder: placeholderText,
        disabled: disabled
      }, other));
    } else {
      input = /*#__PURE__*/_react.default.createElement("input", _extends({
        type: inputType,
        required: required,
        className: ["hover-" + hoverAnimation] + " " + inputClass,
        placeholder: placeholderText
      }, other));
    }
  }

  var span = /*#__PURE__*/_react.default.createElement("span", {
    className: ["bar-" + barAnimation] + " " + barClass
  });

  var label = /*#__PURE__*/_react.default.createElement("label", {
    className: ["label-" + labelAnimation] + " " + labelClass
  }, labelText);

  if (wType === "lined" || wType === "filled") {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "winput ".concat(classes)
    }, input, span, label, children);
  } else if (wType === "outlined") {
    //outlined - field set & legend
    if (labelText && labelAnimation) {
      if (disabled) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "winput ".concat(classes)
        }, /*#__PURE__*/_react.default.createElement("fieldset", null, input, label, children));
      } else {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "winput ".concat(classes)
        }, /*#__PURE__*/_react.default.createElement("fieldset", {
          className: ["hover-" + hoverAnimation] + " " + ["bar-f-" + barAnimation]
        }, input, label, /*#__PURE__*/_react.default.createElement("legend", null, labelText), children));
      }
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "winput ".concat(classes)
    }, input, span, label, children);
  } else {
    // default
    //if (barAnimation) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "winput outlined ".concat(classes)
    }, input, span, label, children); //}

    /*return (
      <div className={`winput outlined ${classes}`}>
        {input}
        <span className="bar-border-highlight" ></span>
        {label}
        {children}
      </div>
    );*/
  }
}

; // props
// inputType: text, password, number
// wType: outlined, lined, filled

var _default = WInput;
exports.default = _default;