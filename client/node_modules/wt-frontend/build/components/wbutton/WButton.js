"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _clsx7 = _interopRequireDefault(require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//import "./wbutton.scss";
function WButton(_ref) {
  var children = _ref.children,
      className = _ref.className,
      onClick = _ref.onClick,
      wType = _ref.wType,
      shape = _ref.shape,
      color = _ref.color,
      size = _ref.size,
      span = _ref.span,
      hoverAnimation = _ref.hoverAnimation,
      clickAnimation = _ref.clickAnimation,
      value = _ref.value,
      disabled = _ref.disabled,
      raised = _ref.raised,
      other = _objectWithoutProperties(_ref, ["children", "className", "onClick", "wType", "shape", "color", "size", "span", "hoverAnimation", "clickAnimation", "value", "disabled", "raised"]);

  // will only add classname if these values aren't empty/undefined
  var classes = (0, _clsx7.default)(className, wType, color, shape, size, {
    "span": span
  }, _defineProperty({}, "hover-" + hoverAnimation, hoverAnimation), _defineProperty({}, "click-" + clickAnimation, clickAnimation), {
    "disabled": disabled
  }, {
    "raised": raised
  });

  if (wType === "ghost" && (hoverAnimation === "lighten" || hoverAnimation === "darken" || hoverAnimation === "colored")) {
    classes = (0, _clsx7.default)(className, wType, color, shape, size, {
      "span": span
    }, _defineProperty({}, "hover-transparent-" + hoverAnimation, hoverAnimation), _defineProperty({}, "click-" + clickAnimation, clickAnimation), {
      "disabled": disabled
    }, {
      "raised": raised
    });
  }

  if (wType === "texted" && (hoverAnimation === "lighten" || hoverAnimation === "darken" || hoverAnimation === "colored")) {
    classes = (0, _clsx7.default)(className, wType, color, shape, size, {
      "span": span
    }, _defineProperty({}, "hover-text-" + hoverAnimation, hoverAnimation), _defineProperty({}, "click-" + clickAnimation, clickAnimation), {
      "disabled": disabled
    }, {
      "raised": raised
    });
  }

  return /*#__PURE__*/_react.default.createElement("button", _extends({
    onClick: onClick,
    className: "wbutton ".concat(classes),
    value: value
  }, other), children);
}

;
var _default = WButton; // wType: (default), ghost, texted, transparent
// color: (default), primary, accent, colored, success, danger, warning
// shape: (default), rounded, pill, circle, square
// size: (default), small, medium, large
// span: (default false), true/false
// hoverAnimation: (none as default), darken, lighten, fill, transparent-darken, transparent-lighten, transparent-colored
// clickAnimation: (none as default), ripple-dark, ripple-light
// disabled: (default true), true/false
// raised: (default true), true/false

exports.default = _default;