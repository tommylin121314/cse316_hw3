{"ast":null,"code":"var _jsxFileName = \"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/index.js\";\nimport './css/style.scss';\nimport './css/layout.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache({\n  /*\n  \tThe cache object ids are generated using the objectID(a string) instead\n  \tof the number id so that objects are refered to consistently across the\n  \tclient and server\n  */\n  dataIdFromObject: object => `${object.__typename}:${object._id}`,\n  typePolicies: {\n    Query: {\n      fields: {\n        getAllEntries: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n\n        }\n      }\n    }\n  }\n}); // bad hardcoding, localhost port should match port in the backend's .env file\n\nconst BACKEND_LOCATION = 'http://localhost:4000/graphql';\nconst client = new ApolloClient({\n  uri: BACKEND_LOCATION,\n  // Credentials: include is necessary to pass along the auth cookies with each server request\n  credentials: 'include',\n  cache: cache\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 2\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/index.js"],"names":["React","ReactDOM","App","ApolloProvider","ApolloClient","InMemoryCache","cache","dataIdFromObject","object","__typename","_id","typePolicies","Query","fields","getAllEntries","merge","existing","incoming","BACKEND_LOCATION","client","uri","credentials","render","document","getElementById"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAO,mBAAP;AACA,OAAOA,KAAP,MAAmB,OAAnB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA4D,gBAA5D;;AACA,MAAMC,KAAK,GAAG,IAAID,aAAJ,CAAkB;AAE/B;AACD;AACA;AACA;AACA;AACCE,EAAAA,gBAAgB,EAAEC,MAAM,IAAK,GAAEA,MAAM,CAACC,UAAW,IAAGD,MAAM,CAACE,GAAI,EAPhC;AAQ/BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE;AACNC,MAAAA,MAAM,EAAE;AACPC,QAAAA,aAAa,EAAE;AACdC,UAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACxB,mBAAOA,QAAP;AACA;;AAHa;AADR;AADF;AADM;AARiB,CAAlB,CAAd,C,CAqBA;;AACA,MAAMC,gBAAgB,GAAG,+BAAzB;AAEA,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC/BgB,EAAAA,GAAG,EAAEF,gBAD0B;AAE/B;AACAG,EAAAA,WAAW,EAAE,SAHkB;AAI/Bf,EAAAA,KAAK,EAAEA;AAJwB,CAAjB,CAAf;AAWAL,QAAQ,CAACqB,MAAT,eACC,QAAC,KAAD,CAAO,UAAP;AAAA,yBACC,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA,2BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,QADD,EAMGI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANH","sourcesContent":["import './css/style.scss';\nimport './css/layout.scss';\nimport React \tfrom 'react';\nimport ReactDOM from 'react-dom';\nimport App \t\tfrom './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nconst cache = new InMemoryCache({\n\n\t/*\n\t\tThe cache object ids are generated using the objectID(a string) instead\n\t\tof the number id so that objects are refered to consistently across the\n\t\tclient and server\n\t*/\n\tdataIdFromObject: object => `${object.__typename}:${object._id}`,\n\ttypePolicies: {\n\t\tQuery: {\n\t\t\tfields: {\n\t\t\t\tgetAllEntries: {\n\t\t\t\t\tmerge(existing, incoming){\n\t\t\t\t\t\treturn incoming\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\n// bad hardcoding, localhost port should match port in the backend's .env file\nconst BACKEND_LOCATION = 'http://localhost:4000/graphql';\n\nconst client = new ApolloClient({\n\turi: BACKEND_LOCATION,\n\t// Credentials: include is necessary to pass along the auth cookies with each server request\n\tcredentials: 'include',\n\tcache: cache,\n});\n\n\n\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ApolloProvider client={client}>\n\t    \t<App />\n\t\t</ApolloProvider>\n  \t</React.StrictMode>,\n  \tdocument.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}