[{"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/index.js":"1","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/App.js":"2","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/cache/queries.js":"3","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/utils/jsTPS.js":"4","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/homescreen/Homescreen.js":"5","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/cache/mutations.js":"6","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/navbar/NavbarOptions.js":"7","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/navbar/Logo.js":"8","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarContents.js":"9","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/CreateAccount.js":"10","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/MainContents.js":"11","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/Login.js":"12","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/Delete.js":"13","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarList.js":"14","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarHeader.js":"15","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableContents.js":"16","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableHeader.js":"17","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarEntry.js":"18","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableEntry.js":"19"},{"size":1156,"mtime":1617137748278,"results":"20","hashOfConfig":"21"},{"size":974,"mtime":1617137748252,"results":"22","hashOfConfig":"21"},{"size":360,"mtime":1617137748259,"results":"23","hashOfConfig":"21"},{"size":11956,"mtime":1617718116259,"results":"24","hashOfConfig":"21"},{"size":8031,"mtime":1617829228304,"results":"25","hashOfConfig":"21"},{"size":2234,"mtime":1617717951687,"results":"26","hashOfConfig":"21"},{"size":1837,"mtime":1617137748273,"results":"27","hashOfConfig":"21"},{"size":169,"mtime":1617137748271,"results":"28","hashOfConfig":"21"},{"size":620,"mtime":1617829255893,"results":"29","hashOfConfig":"21"},{"size":2737,"mtime":1617219014640,"results":"30","hashOfConfig":"21"},{"size":813,"mtime":1617829176588,"results":"31","hashOfConfig":"21"},{"size":2086,"mtime":1617219312986,"results":"32","hashOfConfig":"21"},{"size":974,"mtime":1617219156637,"results":"33","hashOfConfig":"21"},{"size":607,"mtime":1617221182048,"results":"34","hashOfConfig":"21"},{"size":890,"mtime":1617829244609,"results":"35","hashOfConfig":"21"},{"size":767,"mtime":1617827277159,"results":"36","hashOfConfig":"21"},{"size":2588,"mtime":1617829481677,"results":"37","hashOfConfig":"21"},{"size":1268,"mtime":1617220317321,"results":"38","hashOfConfig":"21"},{"size":5380,"mtime":1617828254287,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"10138wn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/index.js",[],["83","84"],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/App.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/cache/queries.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/utils/jsTPS.js",["85"],"export class jsTPS_Transaction {\n    constructor() {};\n    doTransaction() {};\n    undoTransaction () {};\n}\n/*  Handles list name changes, or any other top level details of a todolist that may be added   */\nexport class UpdateListField_Transaction extends jsTPS_Transaction {\n    constructor(_id, field, prev, update, callback) {\n        super();\n        this.prev = prev;\n        this.update = update;\n        this.field = field;\n        this._id = _id;\n        this.updateFunction = callback;\n    }\n    async doTransaction() {\n\t\tconst { data } = await this.updateFunction({ variables: { _id: this._id, field: this.field, value: this.update }});\n\t\treturn data;\n    }\n    async undoTransaction() {\n        const { data } = await this.updateFunction({ variables: { _id: this._id, field: this.field, value: this.prev }});\n\t\treturn data;\n    }\n}\n\n/*  Handles item reordering */\nexport class ReorderItems_Transaction extends jsTPS_Transaction {\n    constructor(listID, itemID, dir, callback) {\n        super();\n        this.listID = listID;\n        this.itemID = itemID;\n\t\tthis.dir = dir;\n\t\tthis.revDir = dir === 1 ? -1 : 1;\n\t\tthis.updateFunction = callback;\n\t}\n\n    async doTransaction() {\n\t\tconst { data } = await this.updateFunction({ variables: { itemId: this.itemID, _id: this.listID, direction: this.dir }});\n\t\treturn data;\n    }\n\n    async undoTransaction() {\n\t\tconst {data} = await this.updateFunction({ variables: { itemId: this.itemID, _id: this.listID, direction: this.revDir }});\n\t\treturn data;\n\n    }\n    \n}\n\nexport class EditItem_Transaction extends jsTPS_Transaction {\n\tconstructor(listID, itemID, field, prev, update, flag, callback) {\n\t\tsuper();\n\t\tthis.listID = listID;\n\t\tthis.itemID = itemID;\n\t\tthis.field = field;\n\t\tthis.prev = prev;\n\t\tthis.update = update;\n\t\tthis.flag = flag;\n\t\tthis.updateFunction = callback;\n\t}\t\n\n\tasync doTransaction() {\n\t\tconst { data } = await this.updateFunction({ \n\t\t\t\tvariables:{  itemId: this.itemID, _id: this.listID, \n\t\t\t\t\t\t\t field: this.field, value: this.update, \n\t\t\t\t\t\t\t flag: this.flag \n\t\t\t\t\t\t  }\n\t\t\t});\n\t\treturn data;\n    }\n\n    async undoTransaction() {\n\t\tconst { data } = await this.updateFunction({ \n\t\t\t\tvariables:{ itemId: this.itemID, _id: this.listID, \n\t\t\t\t\t\t\tfield: this.field, value: this.prev, \n\t\t\t\t\t\t\tflag: this.flag \n\t\t\t\t\t\t  }\n\t\t\t});\n\t\treturn data;\n\n    }\n}\n\n/*  Handles create/delete of list items */\nexport class UpdateListItems_Transaction extends jsTPS_Transaction {\n    // opcodes: 0 - delete, 1 - add \n    constructor(listID, itemID, item, opcode, addfunc, delfunc, index = -1) {\n        super();\n        this.listID = listID;\n\t\tthis.itemID = itemID;\n\t\tthis.item = item;\n        this.addFunction = addfunc;\n        this.deleteFunction = delfunc;\n        this.opcode = opcode;\n        this.index = index;\n    }\n    async doTransaction() {\n\t\tlet data;\n        this.opcode === 0 ? { data } = await this.deleteFunction({\n                            variables: {itemId: this.itemID, _id: this.listID}})\n\t\t\t\t\t\t  : { data } = await this.addFunction({\n\t\t\t\t\t\t\tvariables: {item: this.item, _id: this.listID, index: this.index}})\n\t\tif(this.opcode !== 0) {\n            this.item._id = this.itemID = data.addItem;\n\t\t}\n\t\treturn data;\n    }\n    // Since delete/add are opposites, flip matching opcode\n    async undoTransaction() {\n\t\tlet data;\n        this.opcode === 1 ? { data } = await this.deleteFunction({\n\t\t\t\t\t\t\tvariables: {itemId: this.itemID, _id: this.listID}})\n                          : { data } = await this.addFunction({\n\t\t\t\t\t\t\tvariables: {item: this.item, _id: this.listID, index: this.index}})\n\t\tif(this.opcode !== 1) {\n            this.item._id = this.itemID = data.addItem;\n        }\n\t\treturn data;\n    }\n}\n\nexport class SortItems_Transaction extends jsTPS_Transaction {\n    constructor(listId, opcode, sortFunction, changeOrderFunction) {\n        super();\n        this.listId = listId;\n        this.opcode = opcode;\n        this.sortFunction = sortFunction;\n        this.changeOrderFunction = changeOrderFunction;\n    }\n\n    async doTransaction() {\n        this.oldItems = await this.sortFunction({variables: {_id: this.listId, opcode: this.opcode}});\n        this.oldItems = this.oldItems.data.sortItems;\n        console.log(this.oldItems);\n    }\n\n    async undoTransaction() {\n        await this.changeOrderFunction({variables: {_id: this.listId, oldOrder: this.oldItems}});\n    }\n}\n\n\nexport class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n        // KEEPS TRACK OF WHERE WE ARE IN THE STACK, THUS AFFECTING WHAT\n        // TRANSACTION MAY BE DONE OR UNDONE AT ANY GIVEN TIME\n        this.mostRecentTransaction = -1;\n        // THESE VARIABLES CAN BE TURNED ON AND OFF TO SIGNAL THAT\n        // DO AND UNDO OPERATIONS ARE BEING PERFORMED\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n    \n    /**\n     * Tests to see if the do (i.e. redo) operation is currently being\n     * performed. If it is, true is returned, if not, false.\n     * \n     * return true if the do (i.e. redo) operation is currently in the\n     * process of executing, false otherwise.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n    \n    /**\n     * Tests to see if the undo operation is currently being\n     * performed. If it is, true is returned, if not, false.\n     * \n     * return true if the undo operation is currently in the\n     * process of executing, false otherwise.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n    \n    /**\n     * This function adds the transaction argument to the top of\n     * the transaction processing system stack and then executes it. Note that it does\n     * When this method has completed transaction will be at the top \n     * of the stack, it will have been completed, and the counter have\n     * been moved accordingly.\n     * \n     * param transaction The custom transaction to be added to\n     * the transaction processing system stack and executed.\n     */\n    addTransaction(transaction) {\n        // ARE THERE OLD UNDONE TRANSACTIONS ON THE STACK THAT FIRST\n        // NEED TO BE CLEARED OUT, i.e. ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0)|| (this.mostRecentTransaction < (this.transactions.length-1))) {\n            for (let i = this.transactions.length-1; i > this.mostRecentTransaction; i--) {\n                this.transactions.splice(i, 1);\n            }\n        }\n\n        // AND NOW ADD THE TRANSACTION\n        this.transactions.push(transaction);\n        // AND EXECUTE IT\n        // this.doTransaction();        \n    }\n\n    /**\n     * This function executes the transaction at the location of the counter,\n     * then moving the TPS counter. Note that this may be the transaction\n     * at the top of the TPS stack or somewhere in the middle (i.e. a redo).\n     */\n     async doTransaction() {\n\t\tlet retVal;\n        if (this.hasTransactionToRedo()) {   \n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n\t\t\tretVal = await transaction.doTransaction();\n\t\t\tthis.mostRecentTransaction++;\n\t\t\tthis.performingDo = false;\n            \n        }\n        console.log('transactions: ' + this.getSize());\n        console.log('redo transactions:' + this.getRedoSize());\n        console.log('undo transactions:' + this.getUndoSize());\n\t\tconsole.log(' ')\n\t\treturn retVal;\n    }\n    \n    /**\n     * This function checks to see if there is a transaction to undo. If there\n     * is it will return it, if not, it will return null.\n     * \n     * return The transaction that would be executed if undo is performed, if\n     * there is no transaction to undo, null is returned.\n     */\n    peekUndo() {\n        if (this.hasTransactionToUndo()) {\n            return this.transactions[this.mostRecentTransaction];\n        }\n        else\n            return null;\n    }\n    \n    /**\n     * This function checks to see if there is a transaction to redo. If there\n     * is it will return it, if not, it will return null.\n     * \n     * return The transaction that would be executed if redo is performed, if\n     * there is no transaction to undo, null is returned.\n     */    \n    peekDo() {\n        if (this.hasTransactionToRedo()) {\n            return this.transactions[this.mostRecentTransaction+1];\n        }\n        else\n            return null;\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n     async undoTransaction() {\n\t\tlet retVal;\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n\t\t\tretVal = await transaction.undoTransaction();\n            this.mostRecentTransaction--;\n\t\t\tthis.performingUndo = false;\n        }\n        console.log('transactions: ' + this.getSize());\n        console.log('redo transactions:' + this.getRedoSize());\n        console.log('undo transactions:' + this.getUndoSize());\n        console.log(' ')\n\t\treturn(retVal);\n    }\n\n    /**\n     * This method clears all transactions from the TPS stack\n     * and resets the counter that keeps track of the location\n     * of the top of the stack.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;        \n    }\n    \n    /**\n     * Accessor method that returns the number of transactions currently\n     * on the transaction stack. This includes those that may have been\n     * done, undone, and redone.\n     * \n     * return The number of transactions currently in the transaction stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n    \n    /**\n     * This method returns the number of transactions currently in the\n     * transaction stack that can be redone, meaning they have been added\n     * and done, and then undone.\n     * \n     * return The number of transactions in the stack that can be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * This method returns the number of transactions currently in the \n     * transaction stack that can be undone.\n     * \n     * return The number of transactions in the transaction stack that\n     * can be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n    \n    /**\n     * This method tests to see if there is a transaction on the stack that\n     * can be undone at the time this function is called.\n     * \n     * return true if an undo operation is possible, false otherwise.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n    \n    /**\n     * This method tests to see if there is a transaction on the stack that\n     * can be redone at the time this function is called.\n     * \n     * return true if a redo operation is possible, false otherwise.\n     */\n    hasTransactionToRedo() {\n        return this.mostRecentTransaction < (this.transactions.length-1);\n    }\n        \n    /**\n     * This method builds and returns a textual summary of the current\n     * Transaction Processing System, this includes the toString of\n     * each transaction in the stack.\n     * \n     * return A textual summary of the TPS.\n     */\n    // toString() {\n    //     let text = \"<br>\" +\"--Number of Transactions: \" + this.transactions.length + \"</br>\";\n    //     text += \"<br>\" + \"--Current Index on Stack: \" + this.mostRecentTransaction + \"</br>\";\n    //     text += \"<br>\" + \"--Current Transaction Stack:\" + \"</br>\";\n    //     for (let i = 0; i <= this.mostRecentTransaction; i++) {\n    //         let jsT = this.transactions[i];\n    //         text += \"<br>\" + \"----\" + jsT.toString() + \"</br>\";\n    //     }\n    //     return text;\n    // }\n}","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/homescreen/Homescreen.js",["86","87","88","89","90"],"import React, { useState, useEffect } \tfrom 'react';\nimport Logo \t\t\t\t\t\t\tfrom '../navbar/Logo';\nimport NavbarOptions \t\t\t\t\tfrom '../navbar/NavbarOptions';\nimport MainContents \t\t\t\t\tfrom '../main/MainContents';\nimport SidebarContents \t\t\t\t\tfrom '../sidebar/SidebarContents';\nimport Login \t\t\t\t\t\t\tfrom '../modals/Login';\nimport Delete \t\t\t\t\t\t\tfrom '../modals/Delete';\nimport CreateAccount \t\t\t\t\tfrom '../modals/CreateAccount';\nimport { GET_DB_TODOS } \t\t\t\tfrom '../../cache/queries';\nimport * as mutations \t\t\t\t\tfrom '../../cache/mutations';\nimport { useMutation, useQuery } \t\tfrom '@apollo/client';\nimport { WNavbar, WSidebar, WNavItem } \tfrom 'wt-frontend';\nimport { WLayout, WLHeader, WLMain, WLSide } from 'wt-frontend';\nimport { UpdateListField_Transaction, \n\tUpdateListItems_Transaction, \n\tReorderItems_Transaction, \n\tEditItem_Transaction,\n\tSortItems_Transaction } \t\t\t\tfrom '../../utils/jsTPS';\nimport WInput from 'wt-frontend/build/components/winput/WInput';\n\n\nconst Homescreen = (props) => {\n\n\tlet todolists \t\t\t\t\t\t\t= [];\n\tconst [activeList, setActiveList] \t\t= useState({});\n\tconst [showDelete, toggleShowDelete] \t= useState(false);\n\tconst [showLogin, toggleShowLogin] \t\t= useState(false);\n\tconst [showCreate, toggleShowCreate] \t= useState(false);\n\n\tconst [ReorderTodoItems] \t\t= useMutation(mutations.REORDER_ITEMS);\n\tconst [UpdateTodoItemField] \t= useMutation(mutations.UPDATE_ITEM_FIELD);\n\tconst [UpdateTodolistField] \t= useMutation(mutations.UPDATE_TODOLIST_FIELD);\n\tconst [DeleteTodolist] \t\t\t= useMutation(mutations.DELETE_TODOLIST);\n\tconst [DeleteTodoItem] \t\t\t= useMutation(mutations.DELETE_ITEM);\n\tconst [AddTodolist] \t\t\t= useMutation(mutations.ADD_TODOLIST);\n\tconst [AddTodoItem] \t\t\t= useMutation(mutations.ADD_ITEM);\n\tconst [SortItems]\t\t\t\t= useMutation(mutations.SORT_ITEMS);\n\tconst [ChangeItemOrder]\t\t\t= useMutation(mutations.CHANGE_ITEM_ORDER);\n\n\n\tconst { loading, error, data, refetch } = useQuery(GET_DB_TODOS);\n\tif(loading) { console.log(loading, 'loading'); }\n\tif(error) { console.log(error, 'error'); }\n\tif(data) { todolists = data.getAllTodos; }\n\n\tconst auth = props.user === null ? false : true;\n\n\tconst refetchTodos = async (refetch) => {\n\t\tconst { loading, error, data } = await refetch();\n\t\tif (data) {\n\t\t\ttodolists = data.getAllTodos;\n\t\t\tif (activeList._id) {\n\t\t\t\tlet tempID = activeList._id;\n\t\t\t\tlet list = todolists.find(list => list._id === tempID);\n\t\t\t\tsetActiveList(list);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst tpsUndo = async () => {\n\t\tconst retVal = await props.tps.undoTransaction();\n\t\trefetchTodos(refetch);\n\t\treturn retVal;\n\t}\n\n\tconst tpsRedo = async () => {\n\t\tconst retVal = await props.tps.doTransaction();\n\t\trefetchTodos(refetch);\n\t\treturn retVal;\n\t}\n\n\n\t// Creates a default item and passes it to the backend resolver.\n\t// The return id is assigned to the item, and the item is appended\n\t//  to the local cache copy of the active todolist. \n\tconst addItem = async () => {\n\t\tlet list = activeList;\n\t\tconst items = list.items;\n\t\tconst lastID = items.length >= 1 ? items[items.length - 1].id + 1 : 0;\n\t\tconst newItem = {\n\t\t\t_id: '',\n\t\t\tid: lastID,\n\t\t\tdescription: 'No Description',\n\t\t\tdue_date: 'No Date',\n\t\t\tassigned_to: 'Not Assigned',\n\t\t\tcompleted: false\n\t\t};\n\t\tlet opcode = 1;\n\t\tlet itemID = newItem._id;\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new UpdateListItems_Transaction(listID, itemID, newItem, opcode, AddTodoItem, DeleteTodoItem);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\t};\n\n\n\tconst deleteItem = async (item, index) => {\n\t\tlet listID = activeList._id;\n\t\tlet itemID = item._id;\n\t\tlet opcode = 0;\n\t\tlet itemToDelete = {\n\t\t\t_id: item._id,\n\t\t\tid: item.id,\n\t\t\tdescription: item.description,\n\t\t\tdue_date: item.due_date,\n\t\t\tassigned_to: item.assigned_to,\n\t\t\tcompleted: item.completed\n\t\t}\n\t\tlet transaction = new UpdateListItems_Transaction(listID, itemID, itemToDelete, opcode, AddTodoItem, DeleteTodoItem, index);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\t};\n\n\tconst editItem = async (itemID, field, value, prev) => {\n\t\tlet flag = 0;\n\t\tif (field === 'completed') flag = 1;\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new EditItem_Transaction(listID, itemID, field, prev, value, flag, UpdateTodoItemField);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst reorderItem = async (itemID, dir) => {\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new ReorderItems_Transaction(listID, itemID, dir, ReorderTodoItems);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst createNewList = async () => {\n\t\tconst length = todolists.length\n\t\tconst id = length >= 1 ? todolists[length - 1].id + Math.floor((Math.random() * 100) + 1) : 1;\n\t\tlet list = {\n\t\t\t_id: '',\n\t\t\tid: id,\n\t\t\tname: 'Untitled',\n\t\t\towner: props.user._id,\n\t\t\titems: [],\n\t\t}\n\t\tconsole.log(list);\n\t\tconst { data } = await AddTodolist({ variables: { todolist: list }, refetchQueries: [{ query: GET_DB_TODOS }] });\n\t\tsetActiveList(list)\n\t};\n\n\tconst deleteList = async (_id) => {\n\t\tDeleteTodolist({ variables: { _id: _id }, refetchQueries: [{ query: GET_DB_TODOS }] });\n\t\trefetch();\n\t\tsetActiveList({});\n\t};\n\n\tconst updateListField = async (_id, field, value, prev) => {\n\t\tlet transaction = new UpdateListField_Transaction(_id, field, prev, value, UpdateTodolistField);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst handleSetActive = (id) => {\n\t\tconst todo = todolists.find(todo => todo.id === id || todo._id === id);\n\t\tsetActiveList(todo);\n\t};\n\n\tconst sortItems = async (_id, field) => {\n\t\tlet opcode;\n\t\tif(field === 'Task') {\n\t\t\topcode = 0;\n\t\t}else if(field === 'Due Date'){\n\t\t\topcode = 1;\n\t\t}else if(field === 'Status'){\n\t\t\topcode = 2;\n\t\t}else if(field === 'Assigned To'){\n\t\t\topcode = 3;\n\t\t}\n\t\tlet transaction = new SortItems_Transaction(_id, opcode, SortItems, ChangeItemOrder);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\t}\n\n\t/*\n\t\tSince we only have 3 modals, this sort of hardcoding isnt an issue, if there\n\t\twere more it would probably make sense to make a general modal component, and\n\t\ta modal manager that handles which to show.\n\t*/\n\tconst setShowLogin = () => {\n\t\ttoggleShowDelete(false);\n\t\ttoggleShowCreate(false);\n\t\ttoggleShowLogin(!showLogin);\n\t};\n\n\tconst setShowCreate = () => {\n\t\ttoggleShowDelete(false);\n\t\ttoggleShowLogin(false);\n\t\ttoggleShowCreate(!showCreate);\n\t};\n\n\tconst setShowDelete = () => {\n\t\ttoggleShowCreate(false);\n\t\ttoggleShowLogin(false);\n\t\ttoggleShowDelete(!showDelete)\n\t}\n\n\treturn (\n\t\t<WLayout wLayout=\"header-lside\">\n\t\t\t<WLHeader>\n\t\t\t\t<WNavbar color=\"colored\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<WNavItem>\n\t\t\t\t\t\t\t<Logo className='logo' />\n\t\t\t\t\t\t</WNavItem>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<NavbarOptions\n\t\t\t\t\t\t\tfetchUser={props.fetchUser} auth={auth} \n\t\t\t\t\t\t\tsetShowCreate={setShowCreate} setShowLogin={setShowLogin}\n\t\t\t\t\t\t\trefetchTodos={refetch} setActiveList={setActiveList}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ul>\n\t\t\t\t</WNavbar>\n\t\t\t</WLHeader>\n\n\t\t\t<WLSide side=\"left\">\n\t\t\t\t<WSidebar>\n\t\t\t\t\t{\n\t\t\t\t\t\tactiveList ?\n\t\t\t\t\t\t\t<SidebarContents\n\t\t\t\t\t\t\t\ttodolists={todolists} activeid={activeList.id} auth={auth}\n\t\t\t\t\t\t\t\thandleSetActive={handleSetActive} createNewList={createNewList}\n\t\t\t\t\t\t\t\tupdateListField={updateListField}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t}\n\t\t\t\t</WSidebar>\n\t\t\t</WLSide>\n\t\t\t<WLMain>\n\t\t\t\t{\n\t\t\t\t\tactiveList ? \n\t\t\t\t\t\t\t<div className=\"container-secondary\">\n\t\t\t\t\t\t\t\t<MainContents\n\t\t\t\t\t\t\t\t\taddItem={addItem} deleteItem={deleteItem}\n\t\t\t\t\t\t\t\t\teditItem={editItem} reorderItem={reorderItem}\n\t\t\t\t\t\t\t\t\tsetShowDelete={setShowDelete}\n\t\t\t\t\t\t\t\t\tactiveList={activeList} setActiveList={setActiveList}\n\t\t\t\t\t\t\t\t\tsortItems={sortItems}\n\t\t\t\t\t\t\t\t\tundo={tpsUndo} redo={tpsRedo}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<div className=\"container-secondary\" />\n\t\t\t\t}\n\n\t\t\t</WLMain>\n\n\t\t\t{\n\t\t\t\tshowDelete && (<Delete deleteList={deleteList} activeid={activeList._id} setShowDelete={setShowDelete} />)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tshowCreate && (<CreateAccount fetchUser={props.fetchUser} setShowCreate={setShowCreate} />)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tshowLogin && (<Login fetchUser={props.fetchUser} refetchTodos={refetch}setShowLogin={setShowLogin} />)\n\t\t\t}\n\n\t\t</WLayout>\n\t);\n};\n\nexport default Homescreen;","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/cache/mutations.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/navbar/NavbarOptions.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/navbar/Logo.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarContents.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/CreateAccount.js",["91"],"import React, { useState } \tfrom 'react';\nimport { REGISTER }\t\t\tfrom '../../cache/mutations';\nimport { useMutation }    \tfrom '@apollo/client';\n\nimport { WModal, WMHeader, WMMain, WMFooter, WButton, WInput, WRow, WCol } from 'wt-frontend';\n\nconst CreateAccount = (props) => {\n\tconst [input, setInput] = useState({ email: '', password: '', firstName: '', lastName: '' });\n\tconst [loading, toggleLoading] = useState(false);\n\tconst [Register] = useMutation(REGISTER);\n\n\t\n\tconst updateInput = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tconst updated = { ...input, [name]: value };\n\t\tsetInput(updated);\n\t};\n\n\tconst handleCreateAccount = async (e) => {\n\t\tfor (let field in input) {\n\t\t\tif (!input[field]) {\n\t\t\t\talert('All fields must be filled out to register');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconst { loading, error, data } = await Register({ variables: { ...input } });\n\t\tif (loading) { toggleLoading(true) };\n\t\tif (error) { return `Error: ${error.message}` };\n\t\tif (data) {\n\t\t\tconsole.log(data)\n\t\t\ttoggleLoading(false);\n\t\t\tif(data.register.email === 'already exists') {\n\t\t\t\talert('User with that email already registered');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.fetchUser();\n\t\t\t}\n\t\t\tprops.setShowCreate(false);\n\n\t\t};\n\t};\n\n\treturn (\n        // Replace div with WModal\n\n\t\t<WModal className=\"signup-modal\" visible={true}>\n\t\t\t<WMHeader className=\"modal-header\" onClose={() => props.setShowCreate(false)}>\n\t\t\t\tSign Up\n\t\t\t</WMHeader>\n\n\t\t\t{\n\t\t\t\tloading ? <div />\n\t\t\t\t\t: <WMMain>\n\t\t\t\t\t\t<WRow className=\"modal-col-gap signup-modal\">\n\t\t\t\t\t\t\t<WCol size=\"6\">\n\t\t\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\t\t\tclassName=\"\" onBlur={updateInput} name=\"firstName\" labelAnimation=\"up\" \n\t\t\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"First Name\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</WCol>\n\t\t\t\t\t\t\t<WCol size=\"6\">\n\t\t\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\t\t\tclassName=\"\" onBlur={updateInput} name=\"lastName\" labelAnimation=\"up\" \n\t\t\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Last Name\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</WCol>\n\t\t\t\t\t\t</WRow>\n\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\tclassName=\"modal-input\" onBlur={updateInput} name=\"email\" labelAnimation=\"up\" \n\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Email Address\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\tclassName=\"modal-input\" onBlur={updateInput} name=\"password\" labelAnimation=\"up\" \n\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Password\" wType=\"outlined\" inputType=\"password\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</WMMain>\n\t\t\t}\n\t\t\t<WButton className=\"modal-button\" onClick={handleCreateAccount} span clickAnimation=\"ripple-light\" hoverAnimation=\"darken\" shape=\"rounded\" color=\"primary\">\n\t\t\t\tSubmit\n\t\t\t</WButton>\n\t\t</WModal>\n\t);\n}\n\nexport default CreateAccount;\n","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/MainContents.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/Login.js",["92","93"],"import React, { useState } \tfrom 'react';\nimport { LOGIN } \t\t\tfrom '../../cache/mutations';\nimport { useMutation }    \tfrom '@apollo/client';\n\nimport { WModal, WMHeader, WMMain, WMFooter, WButton, WInput } from 'wt-frontend';\n\nconst Login = (props) => {\n\tconst [input, setInput] = useState({ email: '', password: '' });\n\tconst [loading, toggleLoading] = useState(false);\n\tconst [showErr, displayErrorMsg] = useState(false);\n\tconst errorMsg = \"Email/Password not found.\";\n\tconst [Login] = useMutation(LOGIN);\n\n\tconst updateInput = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tconst updated = { ...input, [name]: value };\n\t\tsetInput(updated);\n\t}\n\n\tconst handleLogin = async (e) => {\n\n\t\tconst { loading, error, data } = await Login({ variables: { ...input } });\n\t\tif (loading) { toggleLoading(true) };\n\t\tif (data.login._id === null) {\n\t\t\tdisplayErrorMsg(true);\n\t\t\treturn;\n\t\t}\n\t\tif (data) {\n\t\t\tprops.fetchUser();\n\t\t\tprops.refetchTodos();\n\t\t\ttoggleLoading(false)\n\t\t\tprops.setShowLogin(false)\n\t\t};\n\t};\n\n\n\treturn (\n        // Replace div with WModal\n\n\t\t<WModal className=\"login-modal\" visible={true}>\n\t\t\t<WMHeader className=\"modal-header\" onClose={() => props.setShowLogin(false)}>\n\t\t\t\tLogin\n\t\t\t</WMHeader>\n\n\t\t\t{\n\t\t\t\tloading ? <div />\n\t\t\t\t\t: <WMMain className=\"main-login-modal\">\n\n\t\t\t\t\t\t<WInput className=\"modal-input\" onBlur={updateInput} name='email' labelAnimation=\"up\" barAnimation=\"solid\" labelText=\"Email Address\" wType=\"outlined\" inputType='text' />\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput className=\"modal-input\" onBlur={updateInput} name='password' labelAnimation=\"up\" barAnimation=\"solid\" labelText=\"Password\" wType=\"outlined\" inputType='password' />\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshowErr ? <div className='modal-error'>\n\t\t\t\t\t\t\t\t{errorMsg}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t: <div className='modal-error'>&nbsp;</div>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t</WMMain>\n\t\t\t}\n\t\t\t<div>\n\t\t\t\t<WButton className=\"modal-button\" onClick={handleLogin} span clickAnimation=\"ripple-light\" hoverAnimation=\"darken\" shape=\"rounded\" color=\"primary\">\n\t\t\t\t\tLogin\n\t\t\t\t</WButton>\n\t\t\t</div>\n\t\t</WModal>\n\t);\n}\n\nexport default Login;","/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/modals/Delete.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarList.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarHeader.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableContents.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableHeader.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/sidebar/SidebarEntry.js",[],"/Users/tommylin/Desktop/CSE316/cse316_hw3/client/src/components/main/TableEntry.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":5,"nodeType":"100","messageId":"101","endLine":2,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"106","line":19,"column":8,"nodeType":"104","messageId":"105","endLine":19,"endColumn":14},{"ruleId":"102","severity":1,"message":"107","line":49,"column":11,"nodeType":"104","messageId":"105","endLine":49,"endColumn":18},{"ruleId":"102","severity":1,"message":"108","line":49,"column":20,"nodeType":"104","messageId":"105","endLine":49,"endColumn":25},{"ruleId":"102","severity":1,"message":"109","line":143,"column":11,"nodeType":"104","messageId":"105","endLine":143,"endColumn":15},{"ruleId":"102","severity":1,"message":"110","line":5,"column":36,"nodeType":"104","messageId":"105","endLine":5,"endColumn":44},{"ruleId":"102","severity":1,"message":"110","line":5,"column":36,"nodeType":"104","messageId":"105","endLine":5,"endColumn":44},{"ruleId":"102","severity":1,"message":"108","line":22,"column":20,"nodeType":"104","messageId":"105","endLine":22,"endColumn":25},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'WInput' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'WMFooter' is defined but never used.","no-global-assign","no-unsafe-negation"]